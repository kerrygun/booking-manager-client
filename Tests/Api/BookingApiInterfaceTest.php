<?php
/**
 * BookingApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Booking Manager API
 *
 * # Booking Manager API for Agencies and Charter Fleets  Booking Manager API is a standard Web service that enables clients to connect their data with external systems and services and to extend the automation benefits of the Booking Manager System. - It is used by charter agencies to publish availabilities of Charter Operators and automate booking processes by connecting Booking Manager to their own web sites to allow for seamless online booking experience for end users or integrating it with their CRM solutions in order to automate office procedures. - Charter operators use the web service to connect Booking Manager with their book keeping softwares and save time and effort in accounting department. - Third Party Software tools also use Booking Manager API to display richer information, for example boat tracking systems are able to visualise client contact information directly on the map showing the boat location in real time. ## Document Changes ### 29.05.2020 - `/companies` more information added in response - address, additional telephone and additional mobile number - `/offers` added `kind` parameter in the request - `/yachts` added `validForBases from/to` parameter to the response ### 10.04.2020   - `/yachts` added `shipyardId` parameter to the response - POST `/addDocument` - function to add document on specific item - `/offers` added `sailingAreaId` as additional parameter in request - PUT `/reservation` added `expirationDate` for options      ### 12.03.2020. - Extras valid for certain yacht in `/yachts` - `/yachts` function with extras duration parameter - `validDaysFrom`/`validDaysTo` - `/yachts` function with year of build `year`, default yacht deposit `deposit`, commision percentage `commissionPercentage` and default check in day `defaultCheckInDay` - `/yacht` field `lenghtAtWaterline` corrected to length
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * BookingApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\booking-manager-client\BookingApiInterface
 */
class BookingApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addDocuent
     *
     * Add document.
     *
     */
    public function testAddDocuent(): void
    {
        $client = self::$client;

        $path = '/addDocument/{itemType}';
        $pattern = '{itemType}';
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for addDocuent not implemented');
    }

    /**
     * Test case for cancelReservation
     *
     * Cancel reservation.
     *
     */
    public function testCancelReservation(): void
    {
        $client = self::$client;

        $path = '/reservation/{reservationId}';
        $pattern = '{reservationId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for cancelReservation not implemented');
    }

    /**
     * Test case for confirmReservation
     *
     * Confirm reservation.
     *
     */
    public function testConfirmReservation(): void
    {
        $client = self::$client;

        $path = '/reservation/{reservationId}';
        $pattern = '{reservationId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path);
        $this->markTestSkipped('Test for confirmReservation not implemented');
    }

    /**
     * Test case for createReservation
     *
     * Create reservation.
     *
     */
    public function testCreateReservation(): void
    {
        $client = self::$client;

        $path = '/reservation';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createReservation not implemented');
    }

    /**
     * Test case for getAvailability
     *
     * Gets availability.
     *
     */
    public function testGetAvailability(): void
    {
        $client = self::$client;

        $path = '/availability/{year}';
        $pattern = '{year}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAvailability not implemented');
    }

    /**
     * Test case for getBaseById
     *
     * Gets a specific base.
     *
     */
    public function testGetBaseById(): void
    {
        $client = self::$client;

        $path = '/base/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBaseById not implemented');
    }

    /**
     * Test case for getBases
     *
     * Provides a list of bases.
     *
     */
    public function testGetBases(): void
    {
        $client = self::$client;

        $path = '/bases';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBases not implemented');
    }

    /**
     * Test case for getCompanies
     *
     * Provides a list of companies.
     *
     */
    public function testGetCompanies(): void
    {
        $client = self::$client;

        $path = '/companies';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCompanies not implemented');
    }

    /**
     * Test case for getCompanyBy
     *
     * Gets a specific company.
     *
     */
    public function testGetCompanyBy(): void
    {
        $client = self::$client;

        $path = '/company/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCompanyBy not implemented');
    }

    /**
     * Test case for getCountries
     *
     * Provides a list of countries.
     *
     */
    public function testGetCountries(): void
    {
        $client = self::$client;

        $path = '/countries';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCountries not implemented');
    }

    /**
     * Test case for getCountryById
     *
     * Gets a specific country.
     *
     */
    public function testGetCountryById(): void
    {
        $client = self::$client;

        $path = '/country/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCountryById not implemented');
    }

    /**
     * Test case for getEquipment
     *
     * Provides a list of equipment categories.
     *
     */
    public function testGetEquipment(): void
    {
        $client = self::$client;

        $path = '/equipment';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getEquipment not implemented');
    }

    /**
     * Test case for getOffers
     *
     * Provides a list of available offers.
     *
     */
    public function testGetOffers(): void
    {
        $client = self::$client;

        $path = '/offers';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOffers not implemented');
    }

    /**
     * Test case for getPrices
     *
     * Provides a list of yacht prices.
     *
     */
    public function testGetPrices(): void
    {
        $client = self::$client;

        $path = '/prices';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPrices not implemented');
    }

    /**
     * Test case for getReservation
     *
     * Get reservation.
     *
     */
    public function testGetReservation(): void
    {
        $client = self::$client;

        $path = '/reservation/{reservationId}';
        $pattern = '{reservationId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReservation not implemented');
    }

    /**
     * Test case for getReservations
     *
     * Retrieves all reservations, including cancelled reservations.
     *
     */
    public function testGetReservations(): void
    {
        $client = self::$client;

        $path = '/reservations/{year}';
        $pattern = '{year}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReservations not implemented');
    }

    /**
     * Test case for getSailingAreaById
     *
     * Gets a specific sailing area.
     *
     */
    public function testGetSailingAreaById(): void
    {
        $client = self::$client;

        $path = '/sailingArea/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSailingAreaById not implemented');
    }

    /**
     * Test case for getSailingAreas
     *
     * Provides a list of sailing areas.
     *
     */
    public function testGetSailingAreas(): void
    {
        $client = self::$client;

        $path = '/sailingAreas';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSailingAreas not implemented');
    }

    /**
     * Test case for getShipyardById
     *
     * Gets a specific shipyard.
     *
     */
    public function testGetShipyardById(): void
    {
        $client = self::$client;

        $path = '/shipyard/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getShipyardById not implemented');
    }

    /**
     * Test case for getShipyards
     *
     * Provides a list of shipyards.
     *
     */
    public function testGetShipyards(): void
    {
        $client = self::$client;

        $path = '/shipyards';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getShipyards not implemented');
    }

    /**
     * Test case for getShortAvailability
     *
     * Gets shortAvailability.
     *
     */
    public function testGetShortAvailability(): void
    {
        $client = self::$client;

        $path = '/shortAvailability/{year}';
        $pattern = '{year}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getShortAvailability not implemented');
    }

    /**
     * Test case for getSpecialOffers
     *
     * Provides a list of special offers.
     *
     */
    public function testGetSpecialOffers(): void
    {
        $client = self::$client;

        $path = '/specialOffers';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSpecialOffers not implemented');
    }

    /**
     * Test case for getSpecialOffersByType
     *
     * Provides a list of special offers.
     *
     */
    public function testGetSpecialOffersByType(): void
    {
        $client = self::$client;

        $path = '/specialOffers/{offerType}';
        $pattern = '{offerType}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSpecialOffersByType not implemented');
    }

    /**
     * Test case for getWorldRegionById
     *
     * Gets a specific world region.
     *
     */
    public function testGetWorldRegionById(): void
    {
        $client = self::$client;

        $path = '/worldRegion/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getWorldRegionById not implemented');
    }

    /**
     * Test case for getWorldRegions
     *
     * Provides a list of world regions.
     *
     */
    public function testGetWorldRegions(): void
    {
        $client = self::$client;

        $path = '/worldRegions';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getWorldRegions not implemented');
    }

    /**
     * Test case for getYachts
     *
     * Provides a list of yachts.
     *
     */
    public function testGetYachts(): void
    {
        $client = self::$client;

        $path = '/yachts';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getYachts not implemented');
    }

    /**
     * Test case for getYacthById
     *
     * Gets a specific yacht.
     *
     */
    public function testGetYacthById(): void
    {
        $client = self::$client;

        $path = '/yacht/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getYacthById not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
