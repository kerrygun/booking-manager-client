<?php
/**
 * InvoiceTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Booking Manager API
 *
 * # Booking Manager API for Agencies and Charter Fleets  Booking Manager API is a standard Web service that enables clients to connect their data with external systems and services and to extend the automation benefits of the Booking Manager System. - It is used by charter agencies to publish availabilities of Charter Operators and automate booking processes by connecting Booking Manager to their own web sites to allow for seamless online booking experience for end users or integrating it with their CRM solutions in order to automate office procedures. - Charter operators use the web service to connect Booking Manager with their book keeping softwares and save time and effort in accounting department. - Third Party Software tools also use Booking Manager API to display richer information, for example boat tracking systems are able to visualise client contact information directly on the map showing the boat location in real time. ## Document Changes ### 29.05.2020 - `/companies` more information added in response - address, additional telephone and additional mobile number - `/offers` added `kind` parameter in the request - `/yachts` added `validForBases from/to` parameter to the response ### 10.04.2020   - `/yachts` added `shipyardId` parameter to the response - POST `/addDocument` - function to add document on specific item - `/offers` added `sailingAreaId` as additional parameter in request - PUT `/reservation` added `expirationDate` for options      ### 12.03.2020. - Extras valid for certain yacht in `/yachts` - `/yachts` function with extras duration parameter - `validDaysFrom`/`validDaysTo` - `/yachts` function with year of build `year`, default yacht deposit `deposit`, commision percentage `commissionPercentage` and default check in day `defaultCheckInDay` - `/yacht` field `lenghtAtWaterline` corrected to length
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * InvoiceTest Class Doc Comment
 *
 * @category    Class
 * @description Invoice
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\Invoice
 */
class InvoiceTest extends TestCase
{
    protected Invoice|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(Invoice::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(Invoice::class));
        $this->assertInstanceOf(Invoice::class, $this->object);
    }

    /**
     * Test attribute "type"
     *
     * @group unit
     * @small
     */
    public function testPropertyType(): void
    {
        $this->markTestSkipped('Test for property type not implemented');
    }

    /**
     * Test attribute "invoiceCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyInvoiceCode(): void
    {
        $this->markTestSkipped('Test for property invoiceCode not implemented');
    }

    /**
     * Test attribute "reservationNumber"
     *
     * @group unit
     * @small
     */
    public function testPropertyReservationNumber(): void
    {
        $this->markTestSkipped('Test for property reservationNumber not implemented');
    }

    /**
     * Test attribute "invoiceDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyInvoiceDate(): void
    {
        $this->markTestSkipped('Test for property invoiceDate not implemented');
    }

    /**
     * Test attribute "client"
     *
     * @group unit
     * @small
     */
    public function testPropertyClient(): void
    {
        $this->markTestSkipped('Test for property client not implemented');
    }

    /**
     * Test attribute "clientCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyClientCode(): void
    {
        $this->markTestSkipped('Test for property clientCode not implemented');
    }

    /**
     * Test attribute "clientVatCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyClientVatCode(): void
    {
        $this->markTestSkipped('Test for property clientVatCode not implemented');
    }

    /**
     * Test attribute "clientId"
     *
     * @group unit
     * @small
     */
    public function testPropertyClientId(): void
    {
        $this->markTestSkipped('Test for property clientId not implemented');
    }

    /**
     * Test attribute "guestName"
     *
     * @group unit
     * @small
     */
    public function testPropertyGuestName(): void
    {
        $this->markTestSkipped('Test for property guestName not implemented');
    }

    /**
     * Test attribute "currency"
     *
     * @group unit
     * @small
     */
    public function testPropertyCurrency(): void
    {
        $this->markTestSkipped('Test for property currency not implemented');
    }

    /**
     * Test attribute "exchangeRate"
     *
     * @group unit
     * @small
     */
    public function testPropertyExchangeRate(): void
    {
        $this->markTestSkipped('Test for property exchangeRate not implemented');
    }

    /**
     * Test attribute "altCurrency"
     *
     * @group unit
     * @small
     */
    public function testPropertyAltCurrency(): void
    {
        $this->markTestSkipped('Test for property altCurrency not implemented');
    }

    /**
     * Test attribute "altExchangeRate"
     *
     * @group unit
     * @small
     */
    public function testPropertyAltExchangeRate(): void
    {
        $this->markTestSkipped('Test for property altExchangeRate not implemented');
    }

    /**
     * Test attribute "resource"
     *
     * @group unit
     * @small
     */
    public function testPropertyResource(): void
    {
        $this->markTestSkipped('Test for property resource not implemented');
    }

    /**
     * Test attribute "resourceType"
     *
     * @group unit
     * @small
     */
    public function testPropertyResourceType(): void
    {
        $this->markTestSkipped('Test for property resourceType not implemented');
    }

    /**
     * Test attribute "resourceCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyResourceCode(): void
    {
        $this->markTestSkipped('Test for property resourceCode not implemented');
    }

    /**
     * Test attribute "totalPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyTotalPrice(): void
    {
        $this->markTestSkipped('Test for property totalPrice not implemented');
    }

    /**
     * Test attribute "totalPriceWithoutTax"
     *
     * @group unit
     * @small
     */
    public function testPropertyTotalPriceWithoutTax(): void
    {
        $this->markTestSkipped('Test for property totalPriceWithoutTax not implemented');
    }

    /**
     * Test attribute "rate"
     *
     * @group unit
     * @small
     */
    public function testPropertyRate(): void
    {
        $this->markTestSkipped('Test for property rate not implemented');
    }

    /**
     * Test attribute "totalAltPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyTotalAltPrice(): void
    {
        $this->markTestSkipped('Test for property totalAltPrice not implemented');
    }

    /**
     * Test attribute "totalAltPriceWithoutTax"
     *
     * @group unit
     * @small
     */
    public function testPropertyTotalAltPriceWithoutTax(): void
    {
        $this->markTestSkipped('Test for property totalAltPriceWithoutTax not implemented');
    }

    /**
     * Test attribute "baseFrom"
     *
     * @group unit
     * @small
     */
    public function testPropertyBaseFrom(): void
    {
        $this->markTestSkipped('Test for property baseFrom not implemented');
    }

    /**
     * Test attribute "baseTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyBaseTo(): void
    {
        $this->markTestSkipped('Test for property baseTo not implemented');
    }

    /**
     * Test attribute "alreadyTransferred"
     *
     * @group unit
     * @small
     */
    public function testPropertyAlreadyTransferred(): void
    {
        $this->markTestSkipped('Test for property alreadyTransferred not implemented');
    }

    /**
     * Test attribute "serviceDateFrom"
     *
     * @group unit
     * @small
     */
    public function testPropertyServiceDateFrom(): void
    {
        $this->markTestSkipped('Test for property serviceDateFrom not implemented');
    }

    /**
     * Test attribute "serviceDateTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyServiceDateTo(): void
    {
        $this->markTestSkipped('Test for property serviceDateTo not implemented');
    }

    /**
     * Test attribute "paymentMethodName"
     *
     * @group unit
     * @small
     */
    public function testPropertyPaymentMethodName(): void
    {
        $this->markTestSkipped('Test for property paymentMethodName not implemented');
    }

    /**
     * Test attribute "paymentMethodType"
     *
     * @group unit
     * @small
     */
    public function testPropertyPaymentMethodType(): void
    {
        $this->markTestSkipped('Test for property paymentMethodType not implemented');
    }

    /**
     * Test attribute "agencyId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAgencyId(): void
    {
        $this->markTestSkipped('Test for property agencyId not implemented');
    }

    /**
     * Test attribute "agencyName"
     *
     * @group unit
     * @small
     */
    public function testPropertyAgencyName(): void
    {
        $this->markTestSkipped('Test for property agencyName not implemented');
    }

    /**
     * Test attribute "agencyCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyAgencyCode(): void
    {
        $this->markTestSkipped('Test for property agencyCode not implemented');
    }

    /**
     * Test attribute "agencyVatCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyAgencyVatCode(): void
    {
        $this->markTestSkipped('Test for property agencyVatCode not implemented');
    }

    /**
     * Test attribute "relatedReservationId"
     *
     * @group unit
     * @small
     */
    public function testPropertyRelatedReservationId(): void
    {
        $this->markTestSkipped('Test for property relatedReservationId not implemented');
    }

    /**
     * Test attribute "reservationId"
     *
     * @group unit
     * @small
     */
    public function testPropertyReservationId(): void
    {
        $this->markTestSkipped('Test for property reservationId not implemented');
    }

    /**
     * Test attribute "relatedInvoiceNumber"
     *
     * @group unit
     * @small
     */
    public function testPropertyRelatedInvoiceNumber(): void
    {
        $this->markTestSkipped('Test for property relatedInvoiceNumber not implemented');
    }

    /**
     * Test attribute "vat"
     *
     * @group unit
     * @small
     */
    public function testPropertyVat(): void
    {
        $this->markTestSkipped('Test for property vat not implemented');
    }

    /**
     * Test attribute "services"
     *
     * @group unit
     * @small
     */
    public function testPropertyServices(): void
    {
        $this->markTestSkipped('Test for property services not implemented');
    }

    /**
     * Test attribute "bi"
     *
     * @group unit
     * @small
     */
    public function testPropertyBi(): void
    {
        $this->markTestSkipped('Test for property bi not implemented');
    }
}
